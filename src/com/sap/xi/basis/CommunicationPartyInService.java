
package com.sap.xi.basis;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 *
 */
@WebServiceClient(name = "CommunicationPartyInService", targetNamespace = "http://sap.com/xi/BASIS", wsdlLocation = "CommunicationPartyInImplBean.wsdl")
public class CommunicationPartyInService
    extends Service
{

    private final static URL COMMUNICATIONPARTYINSERVICE_WSDL_LOCATION;
    private final static WebServiceException COMMUNICATIONPARTYINSERVICE_EXCEPTION;
    private final static QName COMMUNICATIONPARTYINSERVICE_QNAME = new QName("http://sap.com/xi/BASIS", "CommunicationPartyInService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
			java.net.URL tmpUrl = IntegratedConfigurationInService.class.getClassLoader()
					.getResource("CommunicationPartyInImplBean.wsdl");
			url = new java.net.URL(tmpUrl.getProtocol(), tmpUrl.getHost(), tmpUrl.getPort(), tmpUrl.getFile());
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        COMMUNICATIONPARTYINSERVICE_WSDL_LOCATION = url;
        COMMUNICATIONPARTYINSERVICE_EXCEPTION = e;
    }

    public CommunicationPartyInService() {
        super(__getWsdlLocation(), COMMUNICATIONPARTYINSERVICE_QNAME);
    }

    public CommunicationPartyInService(WebServiceFeature... features) {
        super(__getWsdlLocation(), COMMUNICATIONPARTYINSERVICE_QNAME, features);
    }

    public CommunicationPartyInService(URL wsdlLocation) {
        super(wsdlLocation, COMMUNICATIONPARTYINSERVICE_QNAME);
    }

    public CommunicationPartyInService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, COMMUNICATIONPARTYINSERVICE_QNAME, features);
    }

    public CommunicationPartyInService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CommunicationPartyInService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns CommunicationPartyIn
     */
    @WebEndpoint(name = "CommunicationPartyInPort")
    public CommunicationPartyIn getCommunicationPartyInPort() {
        return super.getPort(new QName("http://sap.com/xi/BASIS", "CommunicationPartyInPort"), CommunicationPartyIn.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CommunicationPartyIn
     */
    @WebEndpoint(name = "CommunicationPartyInPort")
    public CommunicationPartyIn getCommunicationPartyInPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://sap.com/xi/BASIS", "CommunicationPartyInPort"), CommunicationPartyIn.class, features);
    }

    private static URL __getWsdlLocation() {
        if (COMMUNICATIONPARTYINSERVICE_EXCEPTION!= null) {
            throw COMMUNICATIONPARTYINSERVICE_EXCEPTION;
        }
        return COMMUNICATIONPARTYINSERVICE_WSDL_LOCATION;
    }

}
